{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["tempConvert","kelvin","toFixed","WeatherCard","weatherData","className","name","moment","format","weather","main","temp","humidity","temp_max","temp_min","wind","speed","Date","sys","sunrise","toLocaleTimeString","sunset","App","useState","lat","setLat","long","setLong","data","setData","location","setLocation","cityName","setName","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","useEffect","fetch","then","res","json","getLocation","console","log","address","city","e","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3076e9ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\nimport moment from 'moment';\r\n\r\nconst WeatherCard = ({weatherData}) => (\r\n  <div className=\"main\">\r\n      <p className=\"header\">{weatherData.name}</p>\r\n      <div className=\"flex\">\r\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\r\n        <p className=\"description\">{weatherData.weather[0].main}</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temprature: {tempConvert(weatherData.main.temp)}&deg;F </p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n        \r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Hi:{tempConvert(weatherData.main.temp_max)}&deg;F Low:{tempConvert(weatherData.main.temp_min)}&deg;F</p>\r\n        <p className=\"sunrise-sunset\">Wind Speed: {weatherData.wind.speed} MPH</p>\r\n      </div>\r\n\r\n\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n      </div>\r\n    \r\n  </div>\r\n)\r\nfunction tempConvert(kelvin){\r\n  return (((kelvin -273.15)*1.8)+32).toFixed(0);\r\n}\r\n\r\nexport default WeatherCard;","//import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nfunction App() {\n  const[lat, setLat] = useState([]);\n  const[long, setLong] = useState([]);\n  const[data, setData] = useState([]);\n  const[location,setLocation] = useState([]);\n  const[cityName,setName] = useState([]);\n\n  navigator.geolocation.getCurrentPosition(function(position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude);\n  });\n\n \n  useEffect(() => {\n    \n    //console.log(lat);\n    //console.log(long);\n    getLocation(lat,long)\n    .then(res=>{\n      setLocation(res);\n      try {\n        //var tempob = JSON.parse(d);\n        console.log(res.address.city)\n        //var save = res.address.city;\n        setName(res.address.city);\n      \n      } catch(e) {\n        console.log(e);\n      }\n    });\n    \n    \n    getWeather()\n    .then(res=> {\n      try {\n        setData(res);\n      \n      } catch(e) {\n        console.log(e);\n      }\n      \n    });\n    \n  \n    \n   \n\n    \n    ///data[\"name\"] = location.City;\n\n    /** \n    const fetchData = async () => {\n      \n      \n      //console.log(process.env.REACT_APP_API_URL);\n\n      \n      //first\n      //await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&appid=60cae35d1b9a7652148615f5c4e504ac`)\n      //second\n\n      await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${long}&appid=8fa03f46691074555e14ebe2d2a07cce`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result);\n        //console.log(result);\n      });\n      /*\n      await fetch(`https://us1.locationiq.com/v1/reverse.php?key=pk.25830325a0c832028916fe2ec70cfbda&lat=${lat}&lon=${long}&format=json`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result);\n        console.log(result);\n      });\n      \n\n    }\n    const fetchLocation = async () => {\n      \n      await fetch(`https://us1.locationiq.com/v1/reverse.php?key=pk.25830325a0c832028916fe2ec70cfbda&lat=${lat}&lon=${long}&format=json`)\n      .then(res => res.json())\n      .then(result => {\n        setLocation(result);\n        //console.log(location[\"address\"].city);\n        //console.log(result);\n      });\n      \n\n    }\n    \n    fetchData();\n    fetchLocation();\n    */\n    \n    function getWeather() {\n      return fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=1cc9d32cdb1cdf53293e1aad91562a89`\n      )\n        .then(res => res.json())\n        .then(res => {\n          /** \n          if (Object.entries(weather).length) {\n            const mappedData = mapDataToWeatherInterface(weather);\n            return mappedData;\n          }\n          **/\n         //res[\"name\"] = \"stupid\";\n         return res;\n        });\n    }\n\n  }, [lat,long,cityName])\n  /** \n  function cityName(d){\n    \n    try {\n      //var tempob = JSON.parse(d);\n      console.log(d.address.city)\n    \n    } catch(e) {\n      console.log(e);\n    }\n  }\n  */\n\n  \n  function getLocation(lat, long) {\n    return fetch(\n      `https://us1.locationiq.com/v1/reverse.php?key=pk.25830325a0c832028916fe2ec70cfbda&lat=${lat}&lon=${long}&format=json`\n    )\n      .then(res => res.json())\n      .then(res => {\n        /** \n        if (Object.entries(weather).length) {\n          const mappedData = mapDataToWeatherInterface(weather);\n          return mappedData;\n        }\n        **/\n       //data[\"city\"] = res.address.city;\n       return res;\n      });\n  }\n\n  console.log(data);\n  console.log(location);\n  console.log(\"city name \" + cityName);\n  \n\n\n  return (\n    <div className=\"App\">\n      {(typeof data.main != 'undefined') ? (\n       \n          \n          <Weather weatherData={data}/>\n          \n        \n      ): (\n        <div></div>\n        \n      )}\n\n\n\n    </div>\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}