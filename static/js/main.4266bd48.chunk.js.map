{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["tempConvert","kelvin","toFixed","WeatherCard","weatherData","className","name","moment","format","weather","main","temp","humidity","temp_max","temp_min","wind","speed","Date","sys","sunrise","toLocaleTimeString","sunset","href","App","useState","lat","setLat","undefined","long","setLong","data","setData","cityName","setName","a","console","log","fetch","then","res","json","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","useEffect","getLocation","address","city","e","getWeather","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4266bd48.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\nimport moment from 'moment';\r\n\r\nconst WeatherCard = ({weatherData}) => (\r\n  \r\n  <div className=\"main\">\r\n    \r\n      <p className=\"header\">{weatherData.name}</p>\r\n      <div className=\"flex\">\r\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\r\n        <p className=\"description\">{weatherData.weather[0].main}</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temperature: {tempConvert(weatherData.main.temp)}&deg;F </p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n        \r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Hi:{tempConvert(weatherData.main.temp_max)}&deg;F Low:{tempConvert(weatherData.main.temp_min)}&deg;F</p>\r\n        <p className=\"sunrise-sunset\">Wind Speed: {weatherData.wind.speed} MPH</p>\r\n      </div>\r\n\r\n\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n      </div>\r\n      <a className = \"sunrise-sunset\" href=\"https://github.com/Kevin-Zhang-0/weather-app/tree/master\">Github Link: https://github.com/Kevin-Zhang-0/weather-app/tree/master</a>\r\n  </div>\r\n  \r\n\r\n)\r\nfunction tempConvert(kelvin){\r\n  return (((kelvin -273.15)*1.8)+32).toFixed(0);\r\n}\r\n\r\nexport default WeatherCard;","//import logo from './logo.svg';\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nfunction App() {\n  const[lat, setLat] = useState([]);\n  //console.log(lat);\n  //console.log(lat===undefined);\n  const[long, setLong] = useState([undefined]);\n  const[data, setData] = useState([undefined]);\n  //const[location,setLocation] = useState([undefined]);\n  const[cityName,setName] = useState([undefined]);\n\n  \n  navigator.geolocation.getCurrentPosition(function(position) {\n    setLat(position.coords.latitude);\n    setLong(position.coords.longitude); \n \n  });\n\n \n  useEffect(() => {\n\n    getLocation(lat,long)\n    .then(res=>{\n      \n      try {\n      \n        setName(res.address.city);\n        \n      } catch(e) {\n        console.log(e);\n      }\n    });\n \n    getWeather(cityName)\n    .then(res=> {\n      try {\n        setData(res);\n      \n      } catch(e) {\n        console.log(e);\n      }\n      \n    });\n\n\n  }, [long,cityName])\n \n  async function getWeather(cityName) {\n    console.log(\"fetching weather\");\n\n    return await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName},US&appid=1cc9d32cdb1cdf53293e1aad91562a89`\n    )\n      .then(res => res.json())\n      .then(res => {\n       console.log(res);\n       return res;\n      });\n  }\n  \n  async function getLocation(lat, long) {\n    console.log(\"fetching location\");\n\n    if((lat!==undefined)&&(typeof long!==undefined)){\n      return await fetch(\n        `https://us1.locationiq.com/v1/reverse.php?key=pk.25830325a0c832028916fe2ec70cfbda&lat=${lat}&lon=${long}&format=json`\n      )\n        .then(res => res.json())\n        .then(res => {\n    \n          console.log(res);\n          return res;\n        });\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      \n      {(typeof data.main != 'undefined') ? (\n          \n        \n        <Weather weatherData={data}/>\n        \n        \n\n\n        \n      ): (\n        <div>..loading</div>\n        \n      )}\n\n\n\n    </div>\n\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n \n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}